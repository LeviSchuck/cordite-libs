INCLUDE (${CMAKE_ROOT}/Modules/CheckIncludeFile.cmake)
include(${CMAKE_ROOT}/Modules/CheckTypeSize.cmake)
include(${CMAKE_ROOT}/Modules/CheckFunctionExists.cmake)
include(${CMAKE_ROOT}/Modules/CheckLibraryExists.cmake)
include(${CMAKE_ROOT}/Modules/FindThreads.cmake)
macro (CORE_CHECK_INCLUDE_FILE header var prefix)
     CHECK_INCLUDE_FILE("${header}"        ${prefix}_${var} )
endmacro()

CORE_CHECK_INCLUDE_FILE("dlfcn.h" HAS_DLFCN_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("fcntl.h" HAS_FCNTL_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("inttypes.h" HAS_INTTYPES_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("limits.h" HAS_LIMIT_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("memory.h" HAS_MEMORY_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("stdint.h" HAS_STDINT_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("stdlib.h" HAS_STDLIB_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("strings.h" HAS_STRINGS_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("string.h" HAS_STRING_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("sys/stat.h" HAS_SYS_STAT_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("sys/types.h" HAS_SYS_TYPES_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("unistd.h" HAS_UNISTD_HEADER LOCAL)

CORE_CHECK_INCLUDE_FILE("getopt.h" HAS_GETOPT_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("alloca.h" HAS_GETOPT_HEADER LOCAL)

CHECK_FUNCTION_EXISTS(ftruncate LOCAL_HAS_FTRUNCATE_FUNC)
CHECK_FUNCTION_EXISTS(strchr LOCAL_HAS_STRCHR_FUNC)
CHECK_FUNCTION_EXISTS(strerror LOCAL_HAS_STRERROR_FUNC)
CHECK_FUNCTION_EXISTS(strtol LOCAL_HAS_STRTOL_FUNC)
CHECK_FUNCTION_EXISTS(memset LOCAL_HAS_MEMSET_FUNC)
CHECK_FUNCTION_EXISTS(mkdir LOCAL_HAS_MKDIR_FUNC)

CHECK_FUNCTION_EXISTS(lrint LOCAL_HAS_LRINT_FUNC)
CHECK_FUNCTION_EXISTS(lrintf LOCAL_HAS_LRINTF_FUNC)
CHECK_FUNCTION_EXISTS(__malloc-hook LOCAL_HAS___MALLOC_HOOK_FUNC)

CHECK_TYPE_SIZE(int LOCAL_SIZEOF_INT)
CHECK_TYPE_SIZE(long LOCAL_SIZEOF_LONG)
CHECK_TYPE_SIZE("long long" LOCAL_SIZEOF_LONG_LONG)
CHECK_TYPE_SIZE(short LOCAL_SIZEOF_SHORT)


if(CMAKE_USE_PTHREADS_INIT)
	set(LOCAL_HAS_PTHREAD_LIBRARY 1)
endif()

if(USE_CXX_11)
set(LOCAL_HASH_MAP_CLASS "unordered_map")
set(LOCAL_HASH_MAP_HEADER_LOC "<unordered_map>")
set(LOCAL_HASH_MAP_NAMESPACE "std")
set(LOCAL_HASH_SET_CLASS "unordered_set")
set(LOCAL_HASH_SET_HEADER "<unordered_set>")
else()
set(LOCAL_HASH_MAP_CLASS "unordered_map")
set(LOCAL_HASH_MAP_HEADER_LOC "<tr1/unordered_map>")
set(LOCAL_HASH_MAP_NAMESPACE "std::tr1")
set(LOCAL_HASH_SET_CLASS "unordered_set")
set(LOCAL_HASH_SET_HEADER "<tr1/unordered_set>")
endif()