INCLUDE (${CMAKE_ROOT}/Modules/CheckIncludeFile.cmake)
include(${CMAKE_ROOT}/Modules/CheckTypeSize.cmake)
include(${CMAKE_ROOT}/Modules/CheckFunctionExists.cmake)
include(${CMAKE_ROOT}/Modules/CheckLibraryExists.cmake)
include(${CMAKE_ROOT}/Modules/FindThreads.cmake)
macro (CORE_CHECK_INCLUDE_FILE header var prefix)
     CHECK_INCLUDE_FILE("${header}"        ${prefix}_${var})
     if(${prefix}_${var})
     	set(COMMENT_${var} "")
     else()
     	set(COMMENT_${var} "//")
     endif()
endmacro()
macro (CORE_CHECK_FUNCTION_EXISTS function var prefix)
     CHECK_FUNCTION_EXISTS("${function}"        ${prefix}_${var})
     if(${prefix}_${var})
     	set(COMMENT_${var} "/* */")
     else()
     	set(COMMENT_${var} "//")
     endif()
endmacro()


CORE_CHECK_INCLUDE_FILE("dlfcn.h" HAS_DLFCN_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("fcntl.h" HAS_FCNTL_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("inttypes.h" HAS_INTTYPES_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("limits.h" HAS_LIMIT_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("memory.h" HAS_MEMORY_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("stdint.h" HAS_STDINT_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("stdlib.h" HAS_STDLIB_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("strings.h" HAS_STRINGS_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("string.h" HAS_STRING_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("sys/stat.h" HAS_SYS_STAT_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("sys/types.h" HAS_SYS_TYPES_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("unistd.h" HAS_UNISTD_HEADER LOCAL)

CORE_CHECK_INCLUDE_FILE("getopt.h" HAS_GETOPT_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("alloca.h" HAS_ALLOCA_HEADER LOCAL)

CORE_CHECK_INCLUDE_FILE("arpa/inet.h" HAS_ARPA_INET_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("errno.h" HAS_ERRNO_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("ifaddrs.h" HAS_IFADDRS_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("limits.h" HAS_LIMITS_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("netinet/in.h" HAS_NETINET_IN_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("netinet/tcp.h" HAS_NETINET_TCP_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("stddef.h" HAS_STDDEF_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("sys/eventfd.h" HAS_SYS_EVENTFD_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("sys/socket.h" HAS_SYS_SOCKET_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("sys/time.h" HAS_SYS_TIME_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("sys/uio.h" HAS_SYS_UIO_HEADER LOCAL)
CORE_CHECK_INCLUDE_FILE("time.h" HAS_TIME_HEADER LOCAL)

CORE_CHECK_INCLUDE_FILE("windows.h" HAS_WINDOWS_HEADER LOCAL)


CORE_CHECK_FUNCTION_EXISTS(ftruncate HAS_FTRUNCATE_FUNC LOCAL)
CORE_CHECK_FUNCTION_EXISTS(strchr HAS_STRCHR_FUNC LOCAL)
CORE_CHECK_FUNCTION_EXISTS(strerror HAS_STRERROR_FUNC LOCAL)
CORE_CHECK_FUNCTION_EXISTS(strtol HAS_STRTOL_FUNC LOCAL)
CORE_CHECK_FUNCTION_EXISTS(memset HAS_MEMSET_FUNC LOCAL)
CORE_CHECK_FUNCTION_EXISTS(mkdir HAS_MKDIR_FUNC LOCAL)

CORE_CHECK_FUNCTION_EXISTS(lrint HAS_LRINT_FUNC LOCAL)
CORE_CHECK_FUNCTION_EXISTS(lrintf HAS_LRINTF_FUNC LOCAL)
CORE_CHECK_FUNCTION_EXISTS(__malloc-hook HAS___MALLOC_HOOK_FUNC LOCAL)

CORE_CHECK_FUNCTION_EXISTS(clock_gettime HAS_CLOCK_GETTIME_FUNC LOCAL)
CORE_CHECK_FUNCTION_EXISTS(freeifaddrs HAS_FREEIFADDRS_FUNC LOCAL)
CORE_CHECK_FUNCTION_EXISTS(gethrtime HAS_GETHRTIME_FUNC LOCAL)
CORE_CHECK_FUNCTION_EXISTS(getifaddrs HAS_GETIFADDRS_FUNC LOCAL)
CORE_CHECK_FUNCTION_EXISTS(gettimeofday HAS_GETTIMEODAY_FUNC LOCAL)
CORE_CHECK_FUNCTION_EXISTS(perror HAS_PERROR_FUNC LOCAL)
CORE_CHECK_FUNCTION_EXISTS(socket HAS_SOCKET_FUNC LOCAL)


CHECK_TYPE_SIZE(int LOCAL_SIZEOF_INT)
CHECK_TYPE_SIZE(long LOCAL_SIZEOF_LONG)
CHECK_TYPE_SIZE("long long" LOCAL_SIZEOF_LONG_LONG)
CHECK_TYPE_SIZE(short LOCAL_SIZEOF_SHORT)


if(CMAKE_USE_PTHREADS_INIT)
	set(LOCAL_HAS_PTHREAD_LIBRARY 1)
else()
	set(COMMENT_HAS_PTHREAD_LIBRARY "//")
endif()
FIND_LIBRARY(LIB_IPHLPAPI iphlpapi)
FIND_LIBRARY(LIB_NSL nsl)
FIND_LIBRARY(LIB_RPCRT4 rpcrt4)
FIND_LIBRARY(LIB_RT rt)
FIND_LIBRARY(LIB_SOCKET socket)
FIND_LIBRARY(LIB_WS2_32 ws2_32)

IF(LIB_IPHLPAPI_FOUND)
	SET(LOCAL_HAS_IPHLPAPI_LIBRARY "1")
else()
	set(COMMENT_HAS_IPHLPAPI_LIBRARY "//")
ENDIF()
IF(LIB_NSL_FOUND)
	SET(LOCAL_HAS_NSL_LIBRARY "1")
else()
	set(COMMENT_HAS_NSL_LIBRARY "//")
ENDIF()
IF(LIB_RPCRT4_FOUND)
	SET(LOCAL_HAS_RPCRT4_LIBRARY "1")
else()
	set(COMMENT_HAS_RPCRT4_LIBRARY "//")
ENDIF()
IF(LIB_RT_FOUND)
	SET(LOCAL_HAS_RT_LIBRARY "1")
else()
	set(COMMENT_HAS_RT_LIBRARY "//")
ENDIF()
IF(LIB_SOCKET_FOUND)
	SET(LOCAL_HAS_SOCKET_LIBRARY "1")
else()
	set(COMMENT_HAS_SOCKET_LIBRARY "//")
ENDIF()
IF(LIB_WS2_32_FOUND)
SET(LOCAL_HAS_WS2_32_LIBRARY "1")
else()
	set(COMMENT_HAS_WS2_32_LIBRARY "//")
ENDIF()

if(APPLE)
set(LOCAL_OS_OSX 1)
else()
set(COMMENT_OS_OSX "//")
endif()
if(WIN32)
set(LOCAL_OS_WINDOWS 1)
else()
set(COMMENT_OS_WINDOWS "//")
endif()
if(CYGWIN)
set(LOCAL_OS_CYGWIN 1)
else()
set(COMMENT_OS_CYGWIN "//")
endif()
if(MINGW)
SET(LOCAL_OS_MINGW32 1)
else()
set(COMMENT_OS_MINGW32 "//")
endif()
IF(CMAKE_SYSTEM_NAME STREQUAL "Linux")
SET(LOCAL_OS_LINUX 1)
else()
set(COMMENT_OS_LINUX "//")
endif()


if(USE_CXX_11)
set(LOCAL_HASH_MAP_CLASS "unordered_map")
set(LOCAL_HASH_MAP_HEADER_LOC "<unordered_map>")
set(LOCAL_HASH_MAP_NAMESPACE "std")
set(LOCAL_HASH_SET_CLASS "unordered_set")
set(LOCAL_HASH_SET_HEADER "<unordered_set>")
else()
set(LOCAL_HASH_MAP_CLASS "unordered_map")
set(LOCAL_HASH_MAP_HEADER_LOC "<tr1/unordered_map>")
set(LOCAL_HASH_MAP_NAMESPACE "std::tr1")
set(LOCAL_HASH_SET_CLASS "unordered_set")
set(LOCAL_HASH_SET_HEADER "<tr1/unordered_set>")
endif()